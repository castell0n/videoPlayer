class VideoPlayer {
  constructor(config = {}) {
    this.config = {
      dimensions: {
        width: "100%",
        height: "100%",
        minWidth: 300,
        minHeight: 150,
        ...config.dimensions || {}
      },
      controls: {
        showFullscreen: true,
        showQuality: true,
        showSubtitles: false,
        showVolume: true,
        showTime: true,
        ...config.controls || {}
      },
      videoQualities: config.videoQualities || [{
        name: "Source",
        src: "",
        poster: ""
      }],
      subtitleOptions: config.subtitleOptions || [{
        code: "none",
        label: "Sin subt√≠tulos"
      }],
      behavior: {
        autoplay: false,
        loop: false,
        defaultQuality: "lowest",
        showControlsOnInit: true,
        hideControlsDelay: 3000,
        ...config.behavior || {}
      }
    };
    this.elements = {};
    this.mouseMoveTimeout = null;
    this.init();
  }

  formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs < 10 ? "0" : ""}${secs}`;
  }

  getLowestQuality() {
    const sorted = [...this.config.videoQualities].sort((a, b) => {
      const aNum = parseInt(a.name);
      const bNum = parseInt(b.name);
      return (isNaN(aNum) ? 0 : aNum) - (isNaN(bNum) ? 0 : bNum;
    });
    return sorted[sorted.length - 1];
  }

  getQuality(quality) {
    switch(quality) {
      case "highest": return this.config.videoQualities[0];
      case "720p": 
        return this.config.videoQualities.find(q => q.name.includes("720p")) || this.getLowestQuality();
      default: return this.getLowestQuality();
    }
  }

  togglePlayPause() {
    if (this.elements.video.paused) {
      this.elements.video.play()
        .then(() => {
          this.elements.playPauseBtn.classList.replace("fa-play", "fa-pause");
          this.showControls();
          this.resetHideControlsTimeout();
        })
        .catch(err => console.error("Playback error:", err));
    } else {
      this.elements.video.pause();
      this.elements.playPauseBtn.classList.replace("fa-pause", "fa-play");
      this.showControls();
      clearTimeout(this.mouseMoveTimeout);
    }
  }

  toggleMute() {
    this.elements.video.muted = !this.elements.video.muted;
    this.elements.muteBtn.classList.toggle("fa-volume-up");
    this.elements.muteBtn.classList.toggle("fa-volume-mute");
    this.resetHideControlsTimeout();
  }

  skip(seconds) {
    this.elements.video.currentTime = Math.max(0, 
      Math.min(this.elements.video.duration, 
      this.elements.video.currentTime + seconds));
    this.resetHideControlsTimeout();
  }

  seek(event) {
    if (!isNaN(this.elements.video.duration)) {
      const rect = this.elements.progressBar.getBoundingClientRect();
      const pos = (event.clientX - rect.left) / rect.width;
      this.elements.video.currentTime = pos * this.elements.video.duration;
      this.resetHideControlsTimeout();
    }
  }

  toggleFullscreen() {
    if (document.fullscreenElement) {
      document.exitFullscreen();
    } else {
      this.elements.container.requestFullscreen()
        .catch(err => console.error("Fullscreen error:", err));
    }
    this.resetHideControlsTimeout();
  }

  showControls() {
    this.elements.controls.classList.add("show-controls");
    this.elements.topBar.classList.add("show-controls");
  }

  hideControls() {
    this.elements.controls.classList.remove("show-controls");
    this.elements.topBar.classList.remove("show-controls");
    this.elements.settingsMenu.classList.remove("show-settings");
  }

  resetHideControlsTimeout() {
    clearTimeout(this.mouseMoveTimeout);
    this.mouseMoveTimeout = setTimeout(() => this.hideControls(), 
      this.config.behavior.hideControlsDelay);
  }

  showSettings(event) {
    event.stopPropagation();
    this.elements.settingsMenu.classList.toggle("show-settings");
    this.showControls();
    this.resetHideControlsTimeout();
  }

  hideSettings() {
    this.elements.settingsMenu.classList.remove("show-settings");
  }

  updateProgress() {
    if (!isNaN(this.elements.video.duration)) {
      const percent = (this.elements.video.currentTime / this.elements.video.duration) * 100;
      this.elements.progress.style.width = `${percent}%`;
      this.elements.currentTimeElem.textContent = this.formatTime(this.elements.video.currentTime);
    }
  }

  loadQualityOptions() {
    this.elements.qualityList.innerHTML = "";
    this.config.videoQualities.forEach(quality => {
      const li = document.createElement("li");
      li.textContent = quality.name;
      li.dataset.quality = quality.name.toLowerCase();
      li.addEventListener("click", () => this.changeQuality(quality));
      this.elements.qualityList.appendChild(li);
    });
  }

  loadSubtitleOptions() {
    this.elements.subtitleList.innerHTML = "";
    this.config.subtitleOptions.forEach(sub => {
      const li = document.createElement("li");
      li.textContent = sub.label;
      li.dataset.subtitle = sub.code;
      li.addEventListener("click", () => this.changeSubtitle(sub));
      this.elements.subtitleList.appendChild(li);
    });
  }

  changeQuality(quality) {
    if (this.elements.video.src !== quality.src) {
      const wasPlaying = !this.elements.video.paused;
      const currentTime = this.elements.video.currentTime;
      
      if (wasPlaying) {
        this.elements.video.dataset.shouldPlay = "true";
      }
      
      this.elements.video.src = quality.src;
      this.elements.video.poster = quality.poster;
      this.elements.video.currentTime = currentTime;
      this.elements.video.load();
      
      this.hideSettings();
      this.resetHideControlsTimeout();
    }
  }

  initSubtitles() {
    this.config.subtitleOptions.forEach(sub => {
      if (sub.code !== "none" && sub.src) {
        const track = document.createElement("track");
        track.kind = "subtitles";
        track.label = sub.label;
        track.srclang = sub.code;
        track.src = sub.src;
        this.elements.video.appendChild(track);
      }
    });
  }

  changeSubtitle(sub) {
    Array.from(this.elements.video.textTracks).forEach(track => {
      track.mode = "hidden";
    });
    
    if (sub.code !== "none") {
      const selectedTrack = Array.from(this.elements.video.textTracks)
        .find(track => track.language === sub.code);
      if (selectedTrack) {
        selectedTrack.mode = "showing";
      }
    }
    
    this.hideSettings();
    this.resetHideControlsTimeout();
  }

  setupVideoEvents() {
    this.elements.video.addEventListener("loadedmetadata", () => {
      this.elements.durationElem.textContent = 
        this.formatTime(this.elements.video.duration);
    });

    this.elements.video.addEventListener("timeupdate", () => this.updateProgress());

    this.elements.video.addEventListener("canplay", () => {
      if (this.elements.video.dataset.shouldPlay === "true") {
        this.elements.video.play()
          .then(() => {
            this.elements.playPauseBtn.classList.replace("fa-play", "fa-pause");
            delete this.elements.video.dataset.shouldPlay;
          })
          .catch(err => console.error("Playback resume error:", err));
      }
    });
  }

  setupControls() {
    this.elements.playPauseBtn.addEventListener("click", () => this.togglePlayPause());
    
    this.elements.video.addEventListener("click", (e) => {
      if (e.target === this.elements.video) {
        this.togglePlayPause();
        this.showControls();
        this.resetHideControlsTimeout();
      }
    });
    
    this.elements.muteBtn.addEventListener("click", () => this.toggleMute());
    this.elements.progressBar.addEventListener("click", (e) => this.seek(e));
    this.elements.expandBtn.addEventListener("click", () => this.toggleFullscreen());
    this.elements.backBtn.addEventListener("click", () => this.skip(-10));
    this.elements.forwardBtn.addEventListener("click", () => this.skip(10));
    this.elements.settingsBtn.addEventListener("click", (e) => this.showSettings(e));
    
    document.addEventListener("click", () => this.hideSettings());
    this.elements.settingsMenu.addEventListener("click", (e) => e.stopPropagation());
    
    document.addEventListener("mousemove", () => {
      this.showControls();
      this.resetHideControlsTimeout();
    });
  }

  applyConfig() {
    // Apply dimensions
    if (this.config.dimensions) {
      const dim = this.config.dimensions;
      if (dim.width) this.elements.container.style.width = dim.width;
      if (dim.height) this.elements.container.style.height = dim.height;
      if (dim.minWidth) this.elements.container.style.minWidth = `${dim.minWidth}px`;
      if (dim.minHeight) this.elements.container.style.minHeight = `${dim.minHeight}px`;
    }

    // Apply controls visibility
    this.elements.expandBtn.style.display = 
      this.config.controls.showFullscreen ? "inline-block" : "none";

    // Set initial quality
    const quality = this.getQuality(this.config.behavior.defaultQuality);
    if (quality) {
      this.elements.video.src = quality.src;
      this.elements.video.poster = quality.poster;
      
      this.elements.video.addEventListener("error", () => {
        console.error("Error loading default quality, trying fallback...");
        const fallback = this.getLowestQuality();
        if (fallback && fallback !== quality) {
          this.elements.video.src = fallback.src;
          this.elements.video.poster = fallback.poster;
          this.elements.video.load();
        }
      });
    }

    // Apply autoplay and loop
    if (this.config.behavior.autoplay) {
      this.elements.video.setAttribute("autoplay", "");
    }
    if (this.config.behavior.loop) {
      this.elements.video.setAttribute("loop", "");
    }
  }

  createDOM() {
    // Create container
    const container = document.createElement("div");
    container.className = "container";

    // Create top bar
    const topBar = document.createElement("div");
    topBar.className = "top-bar";

    // Create video wrapper and video element
    const videoWrapper = document.createElement("div");
    videoWrapper.className = "video-wrapper";
    
    const video = document.createElement("video");
    video.className = "video";
    video.id = "video-element";

    // Create controls
    const controls = document.createElement("div");
    controls.className = "controls";

    // Progress bar
    const progressContainer = document.createElement("div");
    progressContainer.className = "progress-container";
    
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar";
    progressBar.id = "progress-bar";
    
    const progress = document.createElement("div");
    progress.className = "progress";
    progress.id = "progress";
    
    progressBar.appendChild(progress);
    progressContainer.appendChild(progressBar);

    // Left controls
    const controlsLeft = document.createElement("div");
    controlsLeft.className = "controls-left";
    
    const playPauseBtn = document.createElement("i");
    playPauseBtn.className = "fas fa-play";
    playPauseBtn.id = "play-pause";
    
    const backBtn = document.createElement("i");
    backBtn.className = "fas fa-step-backward";
    
    const forwardBtn = document.createElement("i");
    forwardBtn.className = "fas fa-step-forward";
    
    const muteBtn = document.createElement("i");
    muteBtn.className = "fas fa-volume-up";
    muteBtn.id = "mute";
    
    const timeDisplay = document.createElement("div");
    timeDisplay.className = "time-display";
    timeDisplay.innerHTML = '<span id="current-time">0:00</span> / <span id="duration">0:00</span>';
    
    controlsLeft.appendChild(backBtn);
    controlsLeft.appendChild(playPauseBtn);
    controlsLeft.appendChild(forwardBtn);
    controlsLeft.appendChild(muteBtn);
    controlsLeft.appendChild(timeDisplay);

    // Right controls
    const controlsRight = document.createElement("div");
    controlsRight.className = "controls-right";
    
    const settingsBtn = document.createElement("i");
    settingsBtn.className = "fas fa-cog";
    
    const expandBtn = document.createElement("i");
    expandBtn.className = "fas fa-expand";
    
    controlsRight.appendChild(settingsBtn);
    controlsRight.appendChild(expandBtn);

    // Settings menu
    const settingsMenu = document.createElement("div");
    settingsMenu.className = "settings-menu";
    settingsMenu.id = "settings-menu";
    
    const qualityList = document.createElement("ul");
    qualityList.id = "quality-list";
    qualityList.innerHTML = '<li class="settings-title">Calidad</li>';
    
    const subtitleList = document.createElement("ul");
    subtitleList.id = "subtitle-list";
    subtitleList.innerHTML = '<li class="settings-title">Subt√≠tulos</li>';
    
    settingsMenu.appendChild(qualityList);
    settingsMenu.appendChild(subtitleList);

    // Assemble controls
    controls.appendChild(progressContainer);
    controls.appendChild(controlsLeft);
    controls.appendChild(controlsRight);
    controls.appendChild(settingsMenu);

    // Assemble video wrapper
    videoWrapper.appendChild(video);

    // Assemble container
    container.appendChild(topBar);
    container.appendChild(videoWrapper);
    container.appendChild(controls);

    // Insert into host
    const host = document.getElementById("video-host");
    host.innerHTML = "";
    host.appendChild(container);

    // Store references
    this.elements = {
      video: video,
      playPauseBtn: playPauseBtn,
      muteBtn: muteBtn,
      progress: progress,
      progressBar: progressBar,
      currentTimeElem: document.getElementById("current-time"),
      durationElem: document.getElementById("duration"),
      settingsBtn: settingsBtn,
      settingsMenu: settingsMenu,
      qualityList: qualityList,
      subtitleList: subtitleList,
      expandBtn: expandBtn,
      backBtn: backBtn,
      forwardBtn: forwardBtn,
      controls: controls,
      topBar: topBar,
      container: container
    };
  }

  init() {
    this.createDOM();
    this.applyConfig();
    this.setupVideoEvents();
    this.setupControls();
    this.loadQualityOptions();
    this.loadSubtitleOptions();
    this.initSubtitles();
    
    if (this.config.behavior.showControlsOnInit) {
      this.showControls();
    }
  }
}

window.VideoPlayer = VideoPlayer;
